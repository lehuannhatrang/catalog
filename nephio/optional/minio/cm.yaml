apiVersion: v1
kind: Namespace
metadata:
  name: minio-system
  labels:
    pod-security.kubernetes.io/warn: "privileged"
    pod-security.kubernetes.io/audit: "privileged"
    pod-security.kubernetes.io/enforce: "privileged"
---
kind: ConfigMap
metadata:
  name: minio-values
  namespace: minio-system
apiVersion: v1
data:
  values.yaml: |
    ## The are config values for minio
    ##
    clusterDomain: cluster.local

    image:
      repository: quay.io/minio/minio
      tag: RELEASE.2024-12-18T13-15-44Z
      pullPolicy: IfNotPresent

    mcImage:
      repository: quay.io/minio/mc
      tag: RELEASE.2024-11-21T17-21-54Z
      pullPolicy: IfNotPresent

    mode: standalone

    minioAPIPort: "9000"
    minioConsolePort: "9001"

    deploymentUpdate:
      type: RollingUpdate
      maxUnavailable: 0
      maxSurge: 100%

    statefulSetUpdate:
      updateStrategy: RollingUpdate

    rootUser: "nephio1234"
    rootPassword: "secret1234"

    certsPath: "/etc/minio/certs/"
    configPathmc: "/etc/minio/mc/"
    mountPath: "/export"

    drivesPerNode: 1
    replicas: 4
    pools: 1

    tls:
      enabled: false
      publicCrt: public.crt
      privateKey: private.key

    persistence:
      enabled: true
      accessMode: ReadWriteOnce
      size: 20Gi

    service:
      type: LoadBalancer
      port: "9000"
      # nodePort: 32000
      # externalTrafficPolicy: Cluster
      # loadBalancerSourceRanges: []

    consoleService:
      type: LoadBalancer
      port: "9001"
      # nodePort: 32001
      # externalTrafficPolicy: Cluster
      # loadBalancerSourceRanges: []

    securityContext:
      enabled: true
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      fsGroupChangePolicy: "OnRootMismatch"

    containerSecurityContext:
      readOnlyRootFilesystem: false

    resources:
      requests:
        memory: 4Gi

    users:
      - accessKey: console
        secretKey: console123
        policy: consoleAdmin

    makePolicyJob:
      securityContext:
        enabled: false
        runAsUser: 1000
        runAsGroup: 1000
      resources:
        requests:
          memory: 128Mi

    makeUserJob:
      securityContext:
        enabled: false
        runAsUser: 1000
        runAsGroup: 1000
      resources:
        requests:
          memory: 128Mi

    buckets: 
      #   # Name of the bucket
      - name: velero
        # Policy to be set on the
        # bucket [none|download|upload|public]
        policy: none
        region: minio1
        # Purge if bucket exists already
        purge: false
        # set versioning for
        # bucket [true|false]
        versioning: false # remove this key if you do not want versioning feature
        # set objectlocking for
        # bucket [true|false] NOTE: versioning is enabled by default if you use locking
        objectlocking: false

    makeServiceAccountJob:
      securityContext:
        enabled: false
        runAsUser: 1000
        runAsGroup: 1000
      resources:
        requests:
          memory: 128Mi
